import abc
from typing import Sequence

from qf_lib.backtesting.qstrader.order.order import Order


class ExecutionHandler(metaclass=abc.ABCMeta):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a PortfolioHandler
    and the set of Fill objects that actually occur in the
    market.

    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.

    ExecutionHandler can link to an optional Compliance component
    for simple record-keeping, which will keep track of all executed
    orders.
    """

    @abc.abstractmethod
    def accept_orders(self, orders: Sequence[Order]) -> None:
        """
        Takes an Order and executes it, producing a FillEvent that gets placed into the event manager.
        """
        raise NotImplementedError("Should implement on_order_event()")
