import abc
from typing import Sequence, List

from qf_lib.backtesting.qstrader.order.order import Order


class ExecutionHandler(metaclass=abc.ABCMeta):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a PortfolioHandler
    and the set of Fill objects that actually occur in the
    market.

    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.

    ExecutionHandler can link to an optional Compliance component
    for simple record-keeping, which will keep track of all executed
    orders.
    """

    @abc.abstractmethod
    def accept_orders(self, orders: Sequence[Order]) -> List[int]:
        """
        Takes an Order and executes it producing a FillEvent that gets placed into the EventManager.

        Returns
        -------
        list of IDs of the Orders submitted
        """
        raise NotImplementedError("Should implement accept_orders()")

    @abc.abstractmethod
    def cancel_order(self, order_id: int):
        """
        Cancels the order with a given ID.

        Raises
        ------
        OrderCancellingException if Order wasn't cancelled
        """
        raise NotImplementedError("Should implement cancel_order()")

    @abc.abstractmethod
    def get_open_orders(self) -> List[Order]:
        """
        Returns
        -------
        the list of all Open orders
        """
        raise NotImplementedError("Should implement get_open_orders()")

    @abc.abstractmethod
    def cancel_all_open_orders(self):
        """
        Cancel all open Orders.
        """
        raise NotImplementedError("Should implement cancel_all_open_orders()")

